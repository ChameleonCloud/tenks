---
# node_types is a dict that defines different sets of node specifications,
# keyed by a 'node type name' to associate with each set of specifications. An
# example of the format of this variable is below:
#
# node_types:
#   # The type name.
#   type0:
#     # The amount of RAM, in mebibytes.
#     memory_mb: 1024
#     # The number of virtual CPUs.
#     vcpus: 2
#     # A list of volumes, each with a capacity.
#     volumes:
#       - capacity: 2GB
#     # A list of physical network names to connect to. These physical network
#     # names should be keyed in `physnet_mappings` in each hypervisor's host
#     # vars.
#     physical_networks:
#       - physnet1
#     # The BMC type for nodes of this type. If not set, `default_bmc_type`
#     # will be used.
#     bmc_type: ipmi
node_types: {}

# specs is a list of configurations of nodes to be created. Each configuration
# can specify the number of nodes to be created, the type (from `node_types`)
# of these nodes, and optionally configuration for the Ironic nodes to be
# enroled from these nodes. If `ironic_config` is not set, Ironic enrolment
# will be skipped for that spec.
# For example:
#
# specs:
#     # Required.
#   - type: type0
#     # Required.
#     count: 4
#     # Optional.
#     ironic_config:
#       # Required.
#       resource_class: my_rc
#       # Optional - defaults to [].
#       traits: []
#       # The following variables are all optional; if not set, a default will
#       # be inferred from the `bmc_type` specified by the node type `type`.
#       hardware_type: ipmi
#       boot_interface: pxe
#       deploy_interface: iscsi
#       management_interface: ipmitool
#       power_interface: ipmitool
specs: []

# nova_flavors is a list of Nova flavors to be created. Each flavor must
# specify the resource class it is associated with, as well as the Tenks node
# type whose hardware specs should be used.
# For example:
#
# nova_flavors:
#     # Required.
#   - resource_class: my_rc
#     # Required.
#     node_type: type0
#     # Defaults to `resource_class`.
#     name: my_flavor
#     # Optional, defaults to [].
#     required_traits: []
#     # Optional, defaults to [].
#     forbidden_traits: []
#     # Extra key-value pairs to add to the flavor's specs. Optional, defaults
#     # to {}.
#     custom_specs: {}
nova_flavors: []

# The Glance UUID of the image to use for the deployment kernel.
deploy_kernel_uuid:
# The Glance UUID of the image to use for the deployment ramdisk.
deploy_ramdisk_uuid:


allocations_file_path: >-
    {{ '/'.join([(playbook_dir | dirname), 'allocations.yml']) }}

# The default BMC type of a node. Can be overridden per-node.
default_bmc_type: ipmi
# Maps BMC types to a dict containing default values for Ironic node
# interfaces, a hardware type, and a BMC emulation tool to use. Any of these
# values can be overridden per-node.
default_bmc_info:
  ipmi:
    hardware_type: ipmi
    boot_interface: pxe
    deploy_interface: iscsi
    management_interface: ipmitool
    power_interface: ipmitool
  # NOTE(w-miller): Redfish is not currently fully supported by Tenks.
  redfish:
    hardware_type: redfish
    boot_interface: pxe
    deploy_interface: iscsi
    management_interface: redfish
    power_interface: redfish

# Maps BMC emulation tools to the BMC type they support.
bmc_emulators:
  virtualbmc: ipmi
  sushy-tools: redfish

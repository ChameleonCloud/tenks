---
- name: Set common strings
  set_fact:
    # vbmcd should already be running, so --no-daemon stops vbmc from spawning
    # another instance of the daemon.
    cmd: "'{{ virtualenv_path }}/bin/vbmc' --no-daemon"
    log_arg: "--log-file '{{ log_directory }}/vbmc-{{ vm.name }}.log'"

# Even if the VM is present in VBMC, we can't guarantee that it's configured
# correctly. It's easiest to delete and re-add it; this should involve minimal
# downtime.
- name: Ensure VM is stopped and deleted in VBMC
  command: >-
    {{ cmd }} {{ item }} '{{ vm.name }}' {{ log_arg }}
  loop:
    - stop
    - delete
  register: res
  changed_when: res.rc != 0
  failed_when:
    - res.rc != 0
    - "'No domain with matching name' not in res.stderr"
  become: true

- name: Ensure VM is added to VBMC
  command: >-
    {{ cmd }} add '{{ vm.name }}'
      --port {{ port }}
      --username '{{ vbmc_ipmi_username }}'
      --password '{{ vbmc_ipmi_password }}'
      --address {{ vbmc_ipmi_listen_address }}
      {{ log_arg }}
  become: true

- name: Ensure VM is started in VBMC
  command: >
    {{ cmd }} start '{{ vm.name }}' {{ log_arg }}
  become: true

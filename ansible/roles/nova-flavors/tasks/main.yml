---
    - name: Ensure Python requirements are installed
      pip:
        requirements: "{{ '/'.join([role_path, 'files', 'requirements.txt']) }}"
        extra_args: >-
          -c {{ flavors_python_upper_constraints_url }}
        virtualenv: "{{ flavors_virtualenv_path }}"

    - name: Register Nova flavors
      os_nova_flavor:
        auth_type: password
        name: "{{ item.name | default(item.resource_class) }}"
        # FIXME(w-miller): don't necessarily assume the first disk?
        disk: "{{ node_types[item.node_type].volumes.0.capacity | default('0')
                  | size_string_to_gb }}"
        ram: "{{ node_types[item.node_type].memory_mb }}"
        vcpus: "{{ node_types[item.node_type].vcpus }}"
        # NOTE(w-miller): I'm not quite sure whether this is janky or beautiful.
        #
        #   * Set hardware specs to zero here for scheduling purposes.
        #   * Add the resource class name.
        #   * Add required and forbidden traits.
        #   * Add any custom specs from the user.
        extra_specs: >-
          {{ {
            "resources:DISK_GB": 0,
            "resources:MEMORY_MB": 0,
            "resources:VCPU": 0,
            "resources:CUSTOM_" ~ (
              item.resource_class | upper
                | regex_replace('[^A-Za-z0-9]', '_')): 1
             }
             | combine(dict(item.required_traits | default([])
                       | map('regex_replace', '(.*)', 'trait:\1')
                       | zip_longest([], fillvalue='required')))
             | combine(dict(item.forbidden_traits | default([])
                       | map('regex_replace', '(.*)', 'trait:\1')
                       | zip_longest([], fillvalue='forbidden')))
             | combine(item.custom_specs | default({}))
          }}
      vars:
        ansible_python_interpreter: >-
          {{ '/'.join([flavors_virtualenv_path, 'bin', 'python']) }}
      loop: "{{ flavors }}"

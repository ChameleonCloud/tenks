---
- name: Check node has a resource class
  fail:
    msg: >
      The `ironic_config` of node '{{ node }}' does not contain a
      `resource_class`.
  when: "'resource_class' not in node.ironic_config"

- name: Get vNIC MAC addresses
  # The output format of this command gives two lines of header, followed by
  # (for each vNIC):
  # <name> <type> <source interface> <model> <MAC>
  # The VMs will have been created with the virt module, using become: true.
  # This targets /bin/virsh rather than /usr/bin/virsh.
  command: /bin/virsh domiflist '{{ node.name }}'
  register: iflist_res
  changed_when: false
  become: true
  delegate_to: "{{ ironic_hypervisor }}"
  run_once: true

# We need to do this for each run to ensure other nodes' NICs don't carry over
# to this run.
- name: Reset list of NICs
  set_fact:
    nics: []

- name: Collect MAC addresses into NIC list
  set_fact:
    nics: "{{ nics | union([{'mac': item.split()[4]}]) }}"
  loop: "{{ iflist_res.stdout_lines[2:] }}"

- name: Create node in Ironic
  os_ironic:
    auth_type: password
    driver: >-
      {{ node.ironic_config.hardware_type | default(
           default_bmc_info[node.bmc_type].hardware_type) }}
    driver_info:
      power:
        ipmi_address: "{{ hostvars[ironic_hypervisor].ipmi_address }}"
        # This is passed in from main.yml.
        ipmi_port: "{{ ipmi_port }}"
        ipmi_username: "{{ hostvars[ironic_hypervisor].ipmi_username }}"
        ipmi_password: "{{ hostvars[ironic_hypervisor].ipmi_password }}"
      deploy:
        deploy_kernel: "{{ ironic_deploy_kernel_uuid | default(omit, true) }}"
        deploy_ramdisk: "{{ ironic_deploy_ramdisk_uuid | default(omit, true) }}"
    name: "{{ node.name }}"
    nics: "{{ nics }}"
  vars:
    # This module requires the openstacksdk package, which is installed within
    # our virtualenv.
    ansible_python_interpreter: >-
      {{ '/'.join([ironic_virtualenv_path, 'bin', 'python']) }}
  register: created_node

# The os_ironic module automatically brings the node from 'enrol' to
# 'available' state, but we still need to set more port and node attributes.
# Use maintenance mode to do this.
- name: Put Ironic node into maintenance mode
  command: >-
    '{{ ironic_virtualenv_path }}/bin/openstack' baremetal node maintenance set
      '{{ created_node.uuid }}'

- name: Set additional Ironic node attributes
  command: >-
    '{{ ironic_virtualenv_path }}/bin/openstack' baremetal node set
      '{{ created_node.uuid }}'
      --resource-class {{ node.ironic_config.resource_class }}
        --boot-interface
          {{ node.ironic_config.boot_interface | default(
               default_bmc_info[node.bmc_type].boot_interface) }}
        --deploy-interface
          {{ node.ironic_config.deploy_interface | default(
               default_bmc_info[node.bmc_type].deploy_interface) }}
        --management-interface
          {{ node.ironic_config.management_interface | default(
               default_bmc_info[node.bmc_type].management_interface) }}
        --power-interface
          {{ node.ironic_config.power_interface | default(
               default_bmc_info[node.bmc_type].power_interface) }}

- name: Add Ironic node traits
  command: >-
    '{{ ironic_virtualenv_path }}/bin/openstack' baremetal node add trait
      '{{ created_node.uuid }}'
      {{ " ".join(node.ironic_config.traits) }}
  when: node.ironic_config.traits | default([])

- name: Set additional Ironic port attributes
  include_tasks: port.yml
  vars:
    source_interface: "{{ vnic.split()[2] }}"
    mac: "{{ vnic.split()[4] }}"
  # Loop over each NIC.
  loop: "{{ iflist_res.stdout_lines[2:] }}"
  loop_control:
    loop_var: vnic

- name: Bring Ironic node out of maintenance mode
  command: >-
    '{{ ironic_virtualenv_path }}/bin/openstack' baremetal node maintenance
      unset '{{ created_node.uuid }}'
